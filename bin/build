#!/bin/bash -e

function main() {
  retrieve_cyberark_ca_cert
  build_binaries "$@"

  # Needed for testing stages
  goos='linux'
  goarch='amd64'
  cp dist/summon-aws-secrets_${goos}_${goarch}_v1/summon-aws-secrets .
}

function retrieve_cyberark_ca_cert() {
  # On CyberArk dev laptops, golang module dependencies are downloaded with a
  # corporate proxy in the middle. For these connections to succeed we need to
  # configure the proxy CA certificate in build containers.
  #
  # To allow this script to also work on non-CyberArk laptops where the CA
  # certificate is not available, we update container certificates based on
  # a (potentially empty) certificate directory, rather than relying on the
  # CA file itself.
  mkdir -p "$(repo_root)/build_ca_certificate"

  # Only attempt to extract the certificate if the security
  # command is available.
  #
  # The certificate file must have the .crt extension to be imported
  # by `update-ca-certificates`.
  if command -v security &>/dev/null
  then
    security find-certificate \
      -a -c "CyberArk Enterprise Root CA" \
      -p > build_ca_certificate/cyberark_root.crt
  fi
}

function repo_root() {
  git rev-parse --show-toplevel
}

function build_binaries() {
  docker-compose build --pull goreleaser

  echo "> Building and packaging binaries"
  docker-compose run --rm \
    goreleaser release --rm-dist --skip-publish --skip-announce --skip-validate "$@"
}

main "$@"
